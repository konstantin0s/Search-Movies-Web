{"version":3,"sources":["cartoon.png","components/MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MovieRow","viewMovie","url","_this","props","movie","id","window","location","href","react_default","a","createElement","className","key","this","alt","src","poster_src","class","title","overview","type","onClick","target","value","React","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","searchHandler","e","searchTerm","performSearch","state","_this2","console","log","urlString","concat","process","$","ajax","success","searchResults","results","movieRows","map","poster_path","movieRow","components_MovieRow","push","setState","rows","error","xhr","status","err","style","width","cartoon","onChange","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17e919a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cartoon.67abc369.png\";","import React from 'react'\n\nclass MovieRow extends React.Component {\n\n  viewMovie = () => {\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\n    window.location.href = url\n  }\n\n  render() {\n    return <table className=\"container\" key={this.props.movie.id}>\n    <tbody className=\"row\">\n      < tr className = \"col col-md-12\" >\n        <td>\n          <img alt=\"poster\" src={this.props.movie.poster_src}/>\n        </td>\n        <td>\n          <h3><i class=\"fa fa-quote-left\"></i>\n          {\n            this.props.movie.title\n          }\n          <i class=\"fa fa-quote-right\"></i>\n</h3>\n          <p className=\"overview\">{this.props.movie.overview}</p>\n          <input className=\"btn btn-primary\" type=\"button\" onClick={this.viewMovie} target=\"_blank\" value=\"View\"/>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  }\n}\n\nexport default MovieRow","import React, { Component } from 'react';\nimport './App.css';\nimport cartoon from './cartoon.png';\nimport MovieRow from './components/MovieRow';\nimport $ from 'jquery';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n     };\n\n  }\n\n  componentWillMount() {\nthis.performSearch(\"ant man\")\n  }\n\n\n  performSearch(searchTerm) {\n    console.log(\"Perform search using moviedb\")\n    const urlString = `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_API_KEY}&query=` + searchTerm\n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        console.log(\"Fetched data successfully\")\n        console.log(searchResults)\n        const results = searchResults.results\n        console.log(results[0])\n\n        var movieRows = []\n\n        results.map((movie) => {\n          movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n          console.log(movie.poster_path)\n          const movieRow = <MovieRow key={movie.id} movie={movie}/>\n          movieRows.push(movieRow)\n        })\n\n        this.setState({rows: movieRows})\n      },\n      error: (xhr, status, err) => {\n        console.error(\"Failed to fetch data\")\n      }\n    })\n  }\n\n  searchHandler = (e) => {\n const searchTerm = e.target.value;\n    this.performSearch(searchTerm)\n  }\n\n  render() {\n    return (\n          <div className=\"App\">\n<table className=\"titleBar\">\n  <tbody>\n    <tr>\n      <td>\n        <img style={{width: '40px'}} src={cartoon} />\n      </td>\n      <td>\n                <h1> MoviesDB Search</h1>\n      </td>\n      <td style={{width: '8px'}}>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n<input onChange={this.searchHandler} className=\"input\" type=\"text\" placeholder=\"Search...\" />\n      {\n        this.state.rows\n      }\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}